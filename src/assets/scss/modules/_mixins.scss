@use "sass:math";

// STANDARD STYLINGS
// Standard focus style for links et al
@mixin focus() {
  outline: 2px dotted $form-color-focus;
  outline-offset: 4px;
}

// functional shadow for items that are appearing over other items
@mixin overshadow() {
  box-shadow: 0 0.5em 1em rgba(0, 0, 0, 0.2);
}

// UTILITIES
// this is to be included with :after for a clearfix
@mixin clearfixed() {
  content: " ";
  display: block;
  clear: left;
  height: 0;
  overflow: hidden;
}

@mixin transition($els: all, $duration: 0.3s, $easing: ease-out) {
  transition: $els $duration $easing;
}

@mixin accessible-hide() {
  position: absolute;
  top: 0;
  left: 0;
  width: 0;
  height: 0;
  overflow: hidden;
}

// HELPER FUNCTION(S)
@function brightness($color) {
  $sum: red($color) + green($color) + blue($color);
  @return percentage(math.div($sum, (255 * 3)));
}

@function contrasting-text($color) {
  @if (brightness($color) > 60%) {
    @return #000; // black for light backgrounds
  } @else {
    @return #fff; // white for darker backgrounds
  }
}

@function lighten-darken($color, $amount: 10%) {
  @if (brightness($color) > 60%) {
    // color is light, should be darkened
    @return darken($color, $amount);
  } @else {
    // color is dark, should be lightened
    @return lighten($color, $amount);
  }
}

@function strip-unit($value) {
  @return math.div($value, ($value * 0 + 1));
}

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      font-size: $min-font-size;
      @media screen and (min-width: $min-vw) {
        font-size: calc(
          #{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} *
            math.div(((100vw - #{$min-vw}), #{strip-unit($max-vw - $min-vw)}))
        );
      }
      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
      }
    }
  }
}
